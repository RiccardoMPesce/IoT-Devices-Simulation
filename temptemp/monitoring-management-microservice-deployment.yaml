apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o temptemp/
    kompose.version: 1.26.1 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: monitoring-management-microservice
  name: monitoring-management-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: monitoring-management-microservice
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o temptemp/
        kompose.version: 1.26.1 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.service: monitoring-management-microservice
    spec:
      containers:
        - args:
            - sh
            - -c
            - ./wait-for.sh kafka:9092 --timeout 60 -- python main.py
          env:
            - name: CLICKHOUSE_HOST
              valueFrom:
                configMapKeyRef:
                  key: CLICKHOUSE_HOST
                  name: env
            - name: CLICKHOUSE_PORT_HTTP
              valueFrom:
                configMapKeyRef:
                  key: CLICKHOUSE_PORT_HTTP
                  name: env
            - name: CLICKHOUSE_PORT_TCP
              valueFrom:
                configMapKeyRef:
                  key: CLICKHOUSE_PORT_TCP
                  name: env
            - name: DATABASE_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_PASSWORD
                  name: env
            - name: DATABASE_USER
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_USER
                  name: env
            - name: DB_HOST
            - name: DB_NAME
            - name: DB_PASSWORD
            - name: DB_PORT
            - name: DB_USERNAME
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  key: ENVIRONMENT
                  name: env
            - name: KAFKA_HOST
              valueFrom:
                configMapKeyRef:
                  key: KAFKA_HOST
                  name: env
            - name: KAFKA_PORT
              valueFrom:
                configMapKeyRef:
                  key: KAFKA_PORT
                  name: env
            - name: KAFKA_PORT_EXTERNAL
              valueFrom:
                configMapKeyRef:
                  key: KAFKA_PORT_EXTERNAL
                  name: env
            - name: KAFKA_PORT_SECONDARY
              valueFrom:
                configMapKeyRef:
                  key: KAFKA_PORT_SECONDARY
                  name: env
            - name: KAFKA_TOPICS
              valueFrom:
                configMapKeyRef:
                  key: KAFKA_TOPICS
                  name: env
            - name: MONGO_DB
              valueFrom:
                configMapKeyRef:
                  key: MONGO_DB
                  name: env
            - name: MONGO_HOST
              valueFrom:
                configMapKeyRef:
                  key: MONGO_HOST
                  name: env
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                configMapKeyRef:
                  key: MONGO_INITDB_DATABASE
                  name: env
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: MONGO_INITDB_ROOT_PASSWORD
                  name: env
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: MONGO_INITDB_ROOT_USERNAME
                  name: env
            - name: MONGO_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: MONGO_PASSWORD
                  name: env
            - name: MONGO_PORT
              valueFrom:
                configMapKeyRef:
                  key: MONGO_PORT
                  name: env
            - name: MONGO_SERVER
              valueFrom:
                configMapKeyRef:
                  key: MONGO_SERVER
                  name: env
            - name: MONGO_USER
              valueFrom:
                configMapKeyRef:
                  key: MONGO_USER
                  name: env
            - name: MQTT_BROKER_HOST
              valueFrom:
                configMapKeyRef:
                  key: MQTT_BROKER_HOST
                  name: env
            - name: MQTT_BROKER_PORT
              valueFrom:
                configMapKeyRef:
                  key: MQTT_BROKER_PORT
                  name: env
            - name: MQTT_TOPIC_PREFIX
              valueFrom:
                configMapKeyRef:
                  key: MQTT_TOPIC_PREFIX
                  name: env
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DB
                  name: env
            - name: POSTGRES_EMAIL
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_EMAIL
                  name: env
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_HOST
                  name: env
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PASSWORD
                  name: env
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_PORT
                  name: env
            - name: POSTGRES_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_USERNAME
                  name: env
            - name: PROJECT_NAME1
              valueFrom:
                configMapKeyRef:
                  key: PROJECT_NAME1
                  name: env
            - name: PROJECT_NAME2
              valueFrom:
                configMapKeyRef:
                  key: PROJECT_NAME2
                  name: env
            - name: PROJECT_NAME3
              valueFrom:
                configMapKeyRef:
                  key: PROJECT_NAME3
                  name: env
            - name: PROMETHEUS_HOST
              valueFrom:
                configMapKeyRef:
                  key: PROMETHEUS_HOST
                  name: env
            - name: PROMETHEUS_PORT
              valueFrom:
                configMapKeyRef:
                  key: PROMETHEUS_PORT
                  name: env
            - name: PUSHGATEWAY_HOST
              valueFrom:
                configMapKeyRef:
                  key: PUSHGATEWAY_HOST
                  name: env
            - name: PUSHGATEWAY_PORT
              valueFrom:
                configMapKeyRef:
                  key: PUSHGATEWAY_PORT
                  name: env
            - name: RECORDING_MICROSERVICE_KAFKA_TOPICS
              valueFrom:
                configMapKeyRef:
                  key: RECORDING_MICROSERVICE_KAFKA_TOPICS
                  name: env
          image: monitoring-management-microservice
          name: monitoring-management-microservice
          ports:
            - containerPort: 8000
          resources: {}
          volumeMounts:
            - mountPath: /app/monitoring-management-microservice/
              name: monitoring-management-microservice-claim0
      restartPolicy: Always
      volumes:
        - name: monitoring-management-microservice-claim0
          persistentVolumeClaim:
            claimName: monitoring-management-microservice-claim0
status: {}
