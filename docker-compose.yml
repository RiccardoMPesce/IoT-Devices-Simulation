version: "3.9"

services:
  zookeeper:
    image: bitnami/zookeeper
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: bitnami/kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    restart: always
    volumes:
      - ./kafka-persistence:/bitnami/kafka
  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   depends_on: 
  #     - kafka 
  #   ports:
  #     - 9000:9000
  #   environment:
  #     - KAFKA_BROKERCONNECT=kafka:9092
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181
  kafka-init:
    image: bitnami/kafka 
    depends_on:
      - kafka 
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic test --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic measure_recordings --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic device_commands --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    env_file:
      - .env
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
      - MONGO_INITDB_DATABASE=$MONGO_INITDB_DATABASE
    volumes:
      - ./mongodb_data/:/data/db/
      - ./docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    depends_on:
      - mongodb
    environment:
      - ME_CONFIG_MONGODB_SERVER=$MONGO_HOST
      - ME_CONFIG_MONGODB_PORT=$MONGO_PORT
      - ME_CONFIG_MONGODB_ADMINUSERNAME=$MONGO_USER
      - ME_CONFIG_MONGODB_ADMINPASSWORD=$MONGO_PASSWORD
      - ME_CONFIG_BASICAUTH_USERNAME=$MONGO_USER
      - ME_CONFIG_BASICAUTH_PASSWORD=$MONGO_PASSWORD
    env_file: .env
    ports:
      - 8081:8081
    volumes: 
      - ./mongodb_data/:/data/db/
  monitoring-management-microservice:
    build: ./monitoring-management-microservice
    command: python main.py
    container_name: monitoring-management-microservice
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DB_USERNAME=${MONGO_USER}
      - DB_PASSWORD=${MONGO_PASSWORD}
      - DB_HOST=${MONGO_HOST}
      - DB_PORT=${MONGO_PORT}
      - DB_NAME=${MONGO_DB}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
    volumes:
      - ./monitoring-management-microservice/:/app/monitoring-management-microservice/
    env_file: .env
    depends_on:
      - mongodb
    ports:
      - 8000:8000

