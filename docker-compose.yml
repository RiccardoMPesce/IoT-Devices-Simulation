version: "3.8"

services:
  zookeeper:
    image: bitnami/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./data/zookeeper:/data/zookeeper
    restart: always
  kafka:
    image: bitnami/kafka
    container_name: kafka
    hostname: kafka
    ports:
      - 9093:9093
    expose:
      - 9093
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS="test:1:1,measure_recordings:1:1,device_commands:1:1,sensor_metrics:1:1"
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    restart: always
    volumes:
      - ./data/kafka:/data/kafka
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    # volumes:
    #   - ./data/kafka/data:/var/lib/kafka/data
    depends_on: 
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    restart: always
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    env_file:
      - .env
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
      - MONGO_INITDB_DATABASE=$MONGO_INITDB_DATABASE
    volumes:
      - ./data/mongodb/:/data/db/
      - ./docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    volumes:
      - ./data/postgres/:/data/postgres/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=$POSTGRES_USERNAME
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=recordings
    env_file: .env
  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    depends_on:
      - mongodb
    environment:
      - ME_CONFIG_MONGODB_SERVER=$MONGO_HOST
      - ME_CONFIG_MONGODB_PORT=$MONGO_PORT
      - ME_CONFIG_MONGODB_ADMINUSERNAME=$MONGO_USER
      - ME_CONFIG_MONGODB_ADMINPASSWORD=$MONGO_PASSWORD
      - ME_CONFIG_BASICAUTH_USERNAME=$MONGO_USER
      - ME_CONFIG_BASICAUTH_PASSWORD=$MONGO_PASSWORD
    env_file: .env
    ports:
      - 8081:8081
    volumes: 
      - ./data/mongodb/:/data/db/
  monitoring-management-microservice:
    build: 
      context: ./monitoring-management-microservice
      dockerfile: Dockerfile
    # command: python main.py
    # command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    command: sh -c "./wait-for.sh kafka:9092 --timeout 60 -- python main.py"
    container_name: monitoring-management-microservice
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DB_USERNAME=${MONGO_USER}
      - DB_PASSWORD=${MONGO_PASSWORD}
      - DB_HOST=${MONGO_HOST}
      - DB_PORT=${MONGO_PORT}
      - DB_NAME=${MONGO_DB}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
    volumes:
      - ./monitoring-management-microservice/:/app/monitoring-management-microservice/
    env_file: .env
    depends_on:
      - kafka
      - mosquitto
    ports:
      - 8000:8000
  recording-microservice:
    build: 
      context: ./recording-microservice
      dockerfile: Dockerfile
    # command: python main.py
    # command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    command: sh -c "./wait-for.sh kafka:9092 --timeout 60 -- python main.py"
    container_name: recording-microservice
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
    volumes:
      - ./recording-microservice/:/app/recording-microservice/
    env_file: .env
    depends_on:
      - kafka
      - mosquitto
    ports:
      - 8001:8001
  analytics-microservice:
    build: 
      context: ./analytics-microservice
      dockerfile: Dockerfile
    # command: python main.py
    # command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    command: sh -c "./wait-for.sh kafka:9092 --timeout 60 -- python main.py"
    container_name: analytics-microservice
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
    volumes:
      - ./analytics-microservice/:/app/analytics-microservice/
    env_file: .env
    depends_on:
      - kafka
    ports:
      - 8002:8002
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    hostname: mosquitto
    restart: always
    volumes:
      - ./data/mosquitto/config:/mosquitto/config
      - ./data/mosquitto/data:/mosquitto/data
      - ./data/mosquitto/log:/mosquitto/log
    ports:
      - 1883:1883
      - 9001:9001
  clickhouse:
    image: yandex/clickhouse-server
    hostname: clickhouse
    container_name: clickhouse
    ports:
      - 8123:8123
    volumes:
      - ./data/clickhouse:/var/lib/clickhouse
  prometheus:
    image: bitnami/prometheus
    restart: always
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/etc/prometheus
  pushgateway:
    image: bitnami/pushgateway
    restart: always
    container_name: pushgateway
    expose:
      - 9091
    ports:
      - 9091:9091
  grafana:
    image: grafana/grafana
    restart: always
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./prometheus/datasource.yml:/etc/grafana/provisioning/datasource.yml
      - ./data/grafana:/var/lib/grafana
      - ./data/grafana_data/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./data/grafana_data/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin